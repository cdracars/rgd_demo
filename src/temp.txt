./lib/utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

./temp.txt

./app/layout.tsx
import './global.css';

export const metadata = {
  title: 'Welcome to rgd-demo',
  description: 'Generated by create-nx-workspace',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}

./app/page.tsx
// src/app/page.tsx
import { Navbar } from '@/components/layout/Navbar';
import { Hero } from '@/components/common/hero';
import { Services } from '@/components/sections/Services';
import { About } from '@/components/sections/About';
import { HousecallIframe } from '@/components/common/housecall-iframe';

export default function HomePage() {
  return (
    <div className="flex flex-col min-h-screen">
      {/* Top Navbar */}
      <Navbar />

      {/* Hero */}
      <Hero />

      {/* Services */}
      <Services />

      {/* About Section */}
      <About />

      {/* Housecall Pro Booking Iframe */}
      <HousecallIframe />

      {/* Footer */}
      <footer className="mt-auto py-6 bg-brand-800 text-white text-center">
        <p className="text-sm">
          Â© {new Date().getFullYear()} Rhino Garage Doors LLC. All rights
          reserved.
        </p>
      </footer>
    </div>
  );
}

./styles/theme/hooks.ts

./styles/theme/tokens.ts
/**
 * src/styles/theme/tokens.ts
 * Theme tokens that map raw colors to semantic uses
 */
import { colors } from './colors';

export const tokens = {
    light: {
        background: colors.rhino[50],
        foreground: colors.rhino[900],
        primary: {
            DEFAULT: colors.rhino[500],
            hover: colors.rhino[600],
            muted: colors.rhino[200],
        },
        secondary: {
            DEFAULT: colors.rhino[400],
            hover: colors.rhino[500],
            muted: colors.rhino[100],
        },
        accent: {
            DEFAULT: colors.info.DEFAULT,
            hover: colors.info.dark,
            muted: colors.info.light,
        },
        error: {
            DEFAULT: colors.error.DEFAULT,
            hover: colors.error.dark,
            muted: colors.error.light,
        },
        warning: {
            DEFAULT: colors.warning.DEFAULT,
            hover: colors.warning.dark,
            muted: colors.warning.light,
        },
        success: {
            DEFAULT: colors.success.DEFAULT,
            hover: colors.success.dark,
            muted: colors.success.light,
        },
        info: {
            DEFAULT: colors.info.DEFAULT,
            hover: colors.info.dark,
            muted: colors.info.light,
        },
        border: colors.rhino[200],
        divider: colors.rhino[100],
        surface: {
            DEFAULT: colors.rhino[50],
            hover: colors.rhino[100],
            selected: colors.rhino[200],
            disabled: colors.rhino[100],
        },
    },
    dark: {
        background: colors.rhino[900],
        foreground: colors.rhino[50],
        primary: {
            DEFAULT: colors.rhino[400],
            hover: colors.rhino[300],
            muted: colors.rhino[700],
        },
        secondary: {
            DEFAULT: colors.rhino[500],
            hover: colors.rhino[400],
            muted: colors.rhino[800],
        },
        accent: {
            DEFAULT: colors.info.DEFAULT,
            hover: colors.info.light,
            muted: colors.info.dark,
        },
        error: {
            DEFAULT: colors.error.DEFAULT,
            hover: colors.error.light,
            muted: colors.error.dark,
        },
        warning: {
            DEFAULT: colors.warning.DEFAULT,
            hover: colors.warning.light,
            muted: colors.warning.dark,
        },
        success: {
            DEFAULT: colors.success.DEFAULT,
            hover: colors.success.light,
            muted: colors.success.dark,
        },
        info: {
            DEFAULT: colors.info.DEFAULT,
            hover: colors.info.light,
            muted: colors.info.dark,
        },
        border: colors.rhino[700],
        divider: colors.rhino[800],
        surface: {
            DEFAULT: colors.rhino[800],
            hover: colors.rhino[700],
            selected: colors.rhino[600],
            disabled: colors.rhino[800],
        },
    },
};
./styles/theme/provider.ts

./styles/theme/colors.ts
/**
 * src/styles/theme/colors.ts
 * Core color definitions based on the Rhino brand
 */
export const colors = {
    rhino: {
        50: '#F5F7FA',
        100: '#E4E9F2',
        200: '#C8D1E3',
        300: '#A7B4D2',
        400: '#7C8DB8',
        500: '#4A5C8F', // Primary brand blue
        600: '#344676',
        700: '#23325D',
        800: '#151E44',
        900: '#0B112B',
    },
    success: {
        light: '#E6F4EA',
        DEFAULT: '#34A853',
        dark: '#1E7E34',
    },
    error: {
        light: '#FDECEA',
        DEFAULT: '#DC3545',
        dark: '#BD2130',
    },
    warning: {
        light: '#FFF3E0',
        DEFAULT: '#FFA000',
        dark: '#FF6F00',
    },
    info: {
        light: '#E3F2FD',
        DEFAULT: '#2196F3',
        dark: '#1976D2',
    }
};
./styles/theme/types.ts
/**
 * src/styles/theme/types.ts
 * Defines the structure of our theme system
 */
export interface ThemeColors {
    // Core brand colors from the Rhino logo
    rhino: {
        50: string;
        100: string;
        200: string;
        300: string;
        400: string;
        500: string;
        600: string;
        700: string;
        800: string;
        900: string;
    };

    // Semantic color mappings
    background: string;
    foreground: string;
    primary: {
        DEFAULT: string;
        hover: string;
        muted: string;
    };
    secondary: {
        DEFAULT: string;
        hover: string;
        muted: string;
    };
    accent: {
        DEFAULT: string;
        hover: string;
        muted: string;
    };
    error: {
        DEFAULT: string;
        hover: string;
        muted: string;
    };
    warning: {
        DEFAULT: string;
        hover: string;
        muted: string;
    };
    success: {
        DEFAULT: string;
        hover: string;
        muted: string;
    };
    info: {
        DEFAULT: string;
        hover: string;
        muted: string;
    };
    border: string;
    divider: string;
    surface: {
        DEFAULT: string;
        hover: string;
        selected: string;
        disabled: string;
    };
}

export interface ThemeConfig {
    colors: ThemeColors;
    borderRadius: string;
    spacing: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    typography: {
        fontFamily: string;
        fontSize: {
            xs: string;
            sm: string;
            base: string;
            lg: string;
            xl: string;
            '2xl': string;
        };
        fontWeight: {
            normal: number;
            medium: number;
            bold: number;
        };
        lineHeight: {
            tight: string;
            normal: string;
            relaxed: string;
        };
    };
    shadows: {
        sm: string;
        md: string;
        lg: string;
    };
    transitions: {
        fast: string;
        normal: string;
        slow: string;
    };
}
./styles/global.css
@tailwind base;
@tailwind components;
@tailwind utilities;

html {
  -webkit-text-size-adjust: 100%;
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
    Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif,
    Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;
  line-height: 1.5;
  tab-size: 4;
  scroll-behavior: smooth;
}
body {
  font-family: inherit;
  line-height: inherit;
  margin: 0;
}
h1,
h2,
p,
pre {
  margin: 0;
}
*,
::before,
::after {
  box-sizing: border-box;
  border-width: 0;
  border-style: solid;
  border-color: currentColor;
}
h1,
h2 {
  font-size: inherit;
  font-weight: inherit;
}
a {
  color: inherit;
  text-decoration: inherit;
}
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
    Liberation Mono, Courier New, monospace;
}
svg {
  display: block;
  vertical-align: middle;
  shape-rendering: auto;
  text-rendering: optimizeLegibility;
}
pre {
  background-color: rgba(55, 65, 81, 1);
  border-radius: 0.25rem;
  color: rgba(229, 231, 235, 1);
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
    Liberation Mono, Courier New, monospace;
  overflow: scroll;
  padding: 0.5rem 0.75rem;
}

.shadow {
  box-shadow: 0 0 #0000, 0 0 #0000, 0 10px 15px -3px rgba(0, 0, 0, 0.1),
    0 4px 6px -2px rgba(0, 0, 0, 0.05);
}
.rounded {
  border-radius: 1.5rem;
}
.wrapper {
  width: 100%;
}
.container {
  margin-left: auto;
  margin-right: auto;
  max-width: 768px;
  padding-bottom: 3rem;
  padding-left: 1rem;
  padding-right: 1rem;
  color: rgba(55, 65, 81, 1);
  width: 100%;
}
#welcome {
  margin-top: 2.5rem;
}
#welcome h1 {
  font-size: 3rem;
  font-weight: 500;
  letter-spacing: -0.025em;
  line-height: 1;
}
#welcome span {
  display: block;
  font-size: 1.875rem;
  font-weight: 300;
  line-height: 2.25rem;
  margin-bottom: 0.5rem;
}
#hero {
  align-items: center;
  background-color: hsla(214, 62%, 21%, 1);
  border: none;
  box-sizing: border-box;
  color: rgba(55, 65, 81, 1);
  display: grid;
  grid-template-columns: 1fr;
  margin-top: 3.5rem;
}
#hero .text-container {
  color: rgba(255, 255, 255, 1);
  padding: 3rem 2rem;
}
#hero .text-container h2 {
  font-size: 1.5rem;
  line-height: 2rem;
  position: relative;
}
#hero .text-container h2 svg {
  color: hsla(162, 47%, 50%, 1);
  height: 2rem;
  left: -0.25rem;
  position: absolute;
  top: 0;
  width: 2rem;
}
#hero .text-container h2 span {
  margin-left: 2.5rem;
}
#hero .text-container a {
  background-color: rgba(255, 255, 255, 1);
  border-radius: 0.75rem;
  color: rgba(55, 65, 81, 1);
  display: inline-block;
  margin-top: 1.5rem;
  padding: 1rem 2rem;
  text-decoration: inherit;
}
#hero .logo-container {
  display: none;
  justify-content: center;
  padding-left: 2rem;
  padding-right: 2rem;
}
#hero .logo-container svg {
  color: rgba(255, 255, 255, 1);
  width: 66.666667%;
}
#middle-content {
  align-items: flex-start;
  display: grid;
  gap: 4rem;
  grid-template-columns: 1fr;
  margin-top: 3.5rem;
}
#learning-materials {
  padding: 2.5rem 2rem;
}
#learning-materials h2 {
  font-weight: 500;
  font-size: 1.25rem;
  letter-spacing: -0.025em;
  line-height: 1.75rem;
  padding-left: 1rem;
  padding-right: 1rem;
}
.list-item-link {
  align-items: center;
  border-radius: 0.75rem;
  display: flex;
  margin-top: 1rem;
  padding: 1rem;
  transition-property: background-color, border-color, color, fill, stroke,
    opacity, box-shadow, transform, filter, backdrop-filter,
    -webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
  width: 100%;
}
.list-item-link svg:first-child {
  margin-right: 1rem;
  height: 1.5rem;
  transition-property: background-color, border-color, color, fill, stroke,
    opacity, box-shadow, transform, filter, backdrop-filter,
    -webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
  width: 1.5rem;
}
.list-item-link > span {
  flex-grow: 1;
  font-weight: 400;
  transition-property: background-color, border-color, color, fill, stroke,
    opacity, box-shadow, transform, filter, backdrop-filter,
    -webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
.list-item-link > span > span {
  color: rgba(107, 114, 128, 1);
  display: block;
  flex-grow: 1;
  font-size: 0.75rem;
  font-weight: 300;
  line-height: 1rem;
  transition-property: background-color, border-color, color, fill, stroke,
    opacity, box-shadow, transform, filter, backdrop-filter,
    -webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
.list-item-link svg:last-child {
  height: 1rem;
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
  width: 1rem;
}
.list-item-link:hover {
  color: rgba(255, 255, 255, 1);
  background-color: hsla(162, 47%, 50%, 1);
}
.list-item-link:hover > span {
}
.list-item-link:hover > span > span {
  color: rgba(243, 244, 246, 1);
}
.list-item-link:hover svg:last-child {
  transform: translateX(0.25rem);
}
#other-links {
}
.button-pill {
  padding: 1.5rem 2rem;
  transition-duration: 300ms;
  transition-property: background-color, border-color, color, fill, stroke,
    opacity, box-shadow, transform, filter, backdrop-filter,
    -webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  align-items: center;
  display: flex;
}
.button-pill svg {
  transition-property: background-color, border-color, color, fill, stroke,
    opacity, box-shadow, transform, filter, backdrop-filter,
    -webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
  flex-shrink: 0;
  width: 3rem;
}
.button-pill > span {
  letter-spacing: -0.025em;
  font-weight: 400;
  font-size: 1.125rem;
  line-height: 1.75rem;
  padding-left: 1rem;
  padding-right: 1rem;
}
.button-pill span span {
  display: block;
  font-size: 0.875rem;
  font-weight: 300;
  line-height: 1.25rem;
}
.button-pill:hover svg,
.button-pill:hover {
  color: rgba(255, 255, 255, 1) !important;
}
#nx-console:hover {
  background-color: rgba(0, 122, 204, 1);
}
#nx-console svg {
  color: rgba(0, 122, 204, 1);
}
#nx-console-jetbrains {
  margin-top: 2rem;
}
#nx-console-jetbrains:hover {
  background-color: rgba(255, 49, 140, 1);
}
#nx-console-jetbrains svg {
  color: rgba(255, 49, 140, 1);
}
#nx-repo:hover {
  background-color: rgba(24, 23, 23, 1);
}
#nx-repo svg {
  color: rgba(24, 23, 23, 1);
}
#nx-cloud {
  margin-bottom: 2rem;
  margin-top: 2rem;
  padding: 2.5rem 2rem;
}
#nx-cloud > div {
  align-items: center;
  display: flex;
}
#nx-cloud > div svg {
  border-radius: 0.375rem;
  flex-shrink: 0;
  width: 3rem;
}
#nx-cloud > div h2 {
  font-size: 1.125rem;
  font-weight: 400;
  letter-spacing: -0.025em;
  line-height: 1.75rem;
  padding-left: 1rem;
  padding-right: 1rem;
}
#nx-cloud > div h2 span {
  display: block;
  font-size: 0.875rem;
  font-weight: 300;
  line-height: 1.25rem;
}
#nx-cloud p {
  font-size: 1rem;
  line-height: 1.5rem;
  margin-top: 1rem;
}
#nx-cloud pre {
  margin-top: 1rem;
}
#nx-cloud a {
  color: rgba(107, 114, 128, 1);
  display: block;
  font-size: 0.875rem;
  line-height: 1.25rem;
  margin-top: 1.5rem;
  text-align: right;
}
#nx-cloud a:hover {
  text-decoration: underline;
}
#commands {
  padding: 2.5rem 2rem;
  margin-top: 3.5rem;
}
#commands h2 {
  font-size: 1.25rem;
  font-weight: 400;
  letter-spacing: -0.025em;
  line-height: 1.75rem;
  padding-left: 1rem;
  padding-right: 1rem;
}
#commands p {
  font-size: 1rem;
  font-weight: 300;
  line-height: 1.5rem;
  margin-top: 1rem;
  padding-left: 1rem;
  padding-right: 1rem;
}
details {
  align-items: center;
  display: flex;
  margin-top: 1rem;
  padding-left: 1rem;
  padding-right: 1rem;
  width: 100%;
}
details pre > span {
  color: rgba(181, 181, 181, 1);
  display: block;
}
summary {
  border-radius: 0.5rem;
  display: flex;
  font-weight: 400;
  padding: 0.5rem;
  cursor: pointer;
  transition-property: background-color, border-color, color, fill, stroke,
    opacity, box-shadow, transform, filter, backdrop-filter,
    -webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
summary:hover {
  background-color: rgba(243, 244, 246, 1);
}
summary svg {
  height: 1.5rem;
  margin-right: 1rem;
  width: 1.5rem;
}
#love {
  color: rgba(107, 114, 128, 1);
  font-size: 0.875rem;
  line-height: 1.25rem;
  margin-top: 3.5rem;
  opacity: 0.6;
  text-align: center;
}
#love svg {
  color: rgba(252, 165, 165, 1);
  width: 1.25rem;
  height: 1.25rem;
  display: inline;
  margin-top: -0.25rem;
}
@media screen and (min-width: 768px) {
  #hero {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  #hero .logo-container {
    display: flex;
  }
  #middle-content {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Custom utilities */
@layer utilities {
  .card-hover {
    @apply transition-all duration-300 hover:shadow-xl hover:-translate-y-1;
  }

  .gradient-overlay {
    @apply before:absolute before:inset-0 before:bg-gradient-to-r before:from-brand-800/80 before:to-brand-900/60;
  }
}

./components/common/container.tsx

./components/common/housecall-iframe.tsx
// src/components/common/housecall-iframe.tsx
'use client';

export function HousecallIframe() {
  return (
    <section
      id="housecall"
      className="py-12 bg-white flex flex-col items-center justify-center"
    >
      <div className="container mx-auto px-4">
        <h2 className="text-3xl font-bold text-center text-brand-800 mb-6">
          Book Your Appointment
        </h2>
        <p className="text-center text-gray-700 mb-8 max-w-xl mx-auto">
          Use our online scheduling tool powered by Housecall Pro for a quick
          and easy booking experience.
        </p>

        {/* The actual iframe â replace src with your Housecall Pro URL/Embed */}
        <div className="w-full h-[1600px]" style={{ overflow: 'hidden' }}>
          <iframe
            src="https://hcp-consumer-web-production.netlify.app/book/RHINO-GARAGE-DOORS-LLC/1ecef8db8a3149f88ce5ce7e7cc30244?fbclid=PAZXh0bgNhZW0CMTEAAaael73nkd_-dcatvW3CiZTBhHvf1XwJNtaLOkp_u8Q8ryAyCGepIV0CiuA_aem_5KkmPXN9-UUMXfyO8jXJ_w"
            width="100%"
            height="1600"
            scrolling="no"
            className="border-0"
            style={{ overflow: 'hidden' }}
            title="Housecall Pro Booking"
          />
        </div>
      </div>
    </section>
  );
}

./components/sections/Services.tsx
/**
 * src/components/sections/Services.tsx
 * Services section with enhanced cards
 */
export function Services() {
  return (
    <section
      id="services"
      className="py-24 bg-gradient-to-b from-white to-rhino-50"
    >
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold text-rhino-800 mb-4">
            Our Services
          </h2>
          <p className="text-rhino-600 max-w-2xl mx-auto">
            Professional garage door services delivered with military precision
            and civilian-friendly care.
          </p>
        </div>

        <div className="grid md:grid-cols-3 gap-8">
          {siteConfig.services.map((service, index) => (
            <ServiceCard key={service.title} service={service} index={index} />
          ))}
        </div>
      </div>
    </section>
  );
}

./components/sections/About.tsx
/**
 * src/components/sections/About.tsx
 * Updated about section with military emphasis
 */
export function About() {
  return (
    <section id="about" className="py-24 bg-rhino-50">
      <div className="container mx-auto px-4">
        <div className="grid md:grid-cols-2 gap-12 items-center">
          <div className="relative">
            <div className="absolute inset-0 bg-gradient-to-r from-rhino-500/20 to-transparent rounded-xl" />
            <Image
              src="/rhino_van.jpg"
              alt="Rhino Garage Doors Service Van"
              width={600}
              height={400}
              className="rounded-xl shadow-2xl relative z-10"
            />
          </div>

          <div className="space-y-6">
            <h2 className="text-4xl font-bold text-rhino-800">
              About Rhino Garage Doors
            </h2>

            <div className="space-y-4">
              <p className="text-rhino-600 text-lg">
                From military precision to garage perfection - our USMC
                veteran-owned business brings the same dedication, discipline,
                and attention to detail to your garage door needs.
              </p>

              <div className="bg-white rounded-lg p-4 border border-rhino-200">
                <p className="flex items-center text-rhino-600">
                  <span className="font-semibold mr-2">USMC Veteran Owned</span>{' '}
                  - Bringing military excellence to civilian service
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

./components/sections/Hero.tsx
import Link from 'next/link';
import { Button } from '../ui/Button';

/**
 * src/components/sections/Hero.tsx
 * Enhanced hero section with brand focus
 */
export function Hero() {
  return (
    <section className="relative min-h-[70vh] bg-gradient-to-b from-rhino-800 to-rhino-900 text-white">
      <div className="container mx-auto px-4 py-24">
        <div className="max-w-3xl mx-auto text-center space-y-8">
          <h1 className="text-5xl md:text-6xl font-bold leading-tight">
            <span className="block text-rhino-200">Professional</span>
            Garage Door Services
            <span className="block text-rhino-300 mt-2">
              With Military Precision
            </span>
          </h1>

          <p className="text-xl text-rhino-100 max-w-2xl mx-auto">
            From the United States Marine Corps to your garage door - bringing
            discipline, reliability, and excellence to every service call.
          </p>

          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button
              asChild
              size="lg"
              className="bg-rhino-500 hover:bg-rhino-600"
            >
              <Link href="#housecall">Schedule Service</Link>
            </Button>
            <Button asChild variant="outline" size="lg">
              <Link href="#services">Our Services</Link>
            </Button>
          </div>
        </div>
      </div>
    </section>
  );
}

./components/layout/Layout.tsx
/**
 * src/components/layout/Layout.tsx
 * Root layout component with theme provider
 */
import { ThemeProvider } from '@/styles/theme/provider';
import { Navbar } from './Navbar';

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <ThemeProvider>
      <div className="flex flex-col min-h-screen">
        <Navbar />
        <main className="flex-grow">{children}</main>
        <Footer />
      </div>
    </ThemeProvider>
  );
}

./components/layout/Navbar.tsx
'use client';

import Link from 'next/link';
import Image from 'next/image';
import { Button } from '@/components/ui/Button';
import { siteConfig } from '@/config/site';

export function Navbar() {
  return (
    <header className="w-full bg-brand-800 text-white sticky top-0 z-50">
      <div className="container mx-auto flex items-center justify-between py-4 px-4">
        <Link href="/" className="flex items-center space-x-2">
          <Image
            src="/logo.svg"
            alt={siteConfig.name}
            width={120}
            height={120}
            priority
          />
          <span className="text-xl font-bold tracking-wide">
            {siteConfig.name}
          </span>
        </Link>

        <nav className="hidden md:flex space-x-6">
          {siteConfig.nav.map((item) => (
            <Link
              key={item.href}
              href={item.href}
              className="hover:text-brand-200 transition-colors"
            >
              {item.title}
            </Link>
          ))}
        </nav>

        <div className="hidden md:block">
          <Button
            asChild
            variant="default"
            className="bg-brand-500 hover:bg-brand-600 text-white"
          >
            <Link href="#housecall">Book Now</Link>
          </Button>
        </div>
      </div>
    </header>
  );
}

./components/ui/motion.tsx
'use client';

import { motion } from 'framer-motion';

export const fadeIn = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 },
};

export const FadeIn = ({
  children,
  delay = 0,
}: {
  children: React.ReactNode;
  delay?: number;
}) => (
  <motion.div
    initial="hidden"
    animate="visible"
    variants={fadeIn}
    transition={{ duration: 0.6, delay }}
  >
    {children}
  </motion.div>
);

./components/ui/Card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

./components/ui/Button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

./config/site.ts
/**
 * src/config/site.ts
 * Updated site configuration
 */
export const siteConfig = {
    name: "Rhino Garage Doors",
    description: "Professional garage door services with military precision",
    nav: [
        { title: "Services", href: "#services" },
        { title: "About", href: "#about" },
        { title: "Book", href: "#housecall" },
    ],
    services: [
        {
            title: "Installation",
            subtitle: "New Garage Doors",
            description: "Professional installation of top-quality garage doors, customized to your preferences and budget.",
            icon: WrenchIcon, // Import from lucide-react
        },
        {
            title: "Repairs",
            subtitle: "Emergency Support",
            description: "Prompt repair services for broken springs, panels, openers, and moreâkeep your door running smoothly.",
            icon: ToolIcon,
        },
        {
            title: "Maintenance",
            subtitle: "Prevention & Upkeep",
            description: "Regular tune-ups and inspections to prevent costly breakdowns and extend the life of your garage door.",
            icon: ShieldCheckIcon,
        },
    ],
};
